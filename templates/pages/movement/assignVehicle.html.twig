{% extends 'base.html.twig' %}

{% block title %}{{ ("Movement Assign Vehicle List" | trans ) }}{% endblock %}

{% block body %}
    <movement-assign-vehicle-list-page
            :select-list="{{ selectList }}"
            :movement="{{ movement }}"
    ></movement-assign-vehicle-list-page>
{% endblock body %}


{% block javascripts %}
    <script>
        let txtTrans = {
            titles: {
                assignVehicles: '{{ 'Asignar vehículos' | trans }}',
                vehiclesToAssign: '{{ 'Vehículos para asignar' | trans }}',
            },
            fields: {
                licensePlate: '{{ 'Matrícula' | trans }}',
                vin: '{{ 'Bastidor' | trans }}',
                brand: '{{ 'Marca' | trans }}',
                model: '{{ 'Modelo' | trans }}',
                carGroup:'{{ 'Grupo' | trans }}',
                branch:'{{ 'Delegación' | trans }}',
                kilometers: '{{ 'Kilometros' | trans }}',
                rentingEndDate: '{{ 'Fecha fin alquiler' | trans }}',
                saleMethod:'{{ 'Método de venta' | trans }}',
                connectedVehicle:'{{ 'Vehículo conectado' | trans }}',
                vehicleStatus:'{{ 'Estado del vehículo' | trans }}',
                raDropOffDate:'{{ 'Fecha fin contrato prevista' | trans }}',
                actualLoadDate: '{{ 'Fecha real carga ' | trans }}',
                actualUnloadDate:'{{ 'Fecha real descarga' | trans }}',
                initBlockDate:'{{ 'Fecha inicio bloqueo' | trans }}',
                endBlockDate:'{{ 'Fecha fin bloqueo' | trans }}',
                maintenanceExpectedEndDate:'{{ 'Fecha prevista salida taller' | trans }}',
                vehicleType: '{{ 'Tipo de vehículo ' | trans }}',
                kmFrom: '{{ 'kilometros desde' | trans }}',
                kmTo: '{{ 'kilometros hasta' | trans }}',
                rentingEndDateFrom: '{{ 'Fecha fin alquiler desde' | trans }}',
                rentingEndDateTo: '{{ 'Fecha fin alquiler hasta' | trans }}',
                checkInDateFrom:'{{ 'Fecha fin contrato desde' | trans }}',

                assignedLicensePlate:'{{ 'Matrículas asignadas' | trans }}',
                loadedLicensePlate:'{{ 'Matrículas cargadas' | trans }}',
                unloadedLicensePlate:'{{ 'Matrículas descargadas' | trans }}',
            },
            form: {
                back: '{{ 'Atrás ' | trans }}',
                actions: '{{ 'Acciones' | trans }}',
                editFilters: '{{ 'Editar filtros' | trans }}',
                downloadExcel:'{{ 'Descargar Excel' | trans }}',
                add:'{{ 'Añadir' | trans }}',
                remove:'{{ 'Eliminar' | trans }}',
                assign:'{{ 'Asignar' | trans }}',
                selectAll:'{{ 'Seleccionar todo' | trans }}',
                selectedTotal:'{{ 'Total seleccionados: ' | trans }}',
                of:'{{ ' de ' | trans }}',
                toAssignUnits:'{{ 'Unidades a asignar' | trans }}',
                expectedUnits:'{{ 'Unidades previstas' | trans }}',
                assignVehiclesQuestion:'{{ '¿Está segur@ que desea asignar estos vehículos?: '| trans }}',
                continue:'{{ 'Continuar' | trans }}',
                cancel:'{{ 'Cancelar' | trans }}',
                yes: '{{ 'Si' | trans }}',
                no: '{{ 'No' | trans }}',
                searchBy:'{{ 'Buscar por' | trans }}',
                close:'{{ 'Cerrar' | trans }}',

                noVehiclesToAssign: '{{ 'No hay seleccionados vehículos para asignar' | trans }}',
                noModelsBrand: '{{ 'No existen modelos de vehículos de la/s marca/s seleccionada/s' | trans }}',
                warnCannotAssignMoreVehicles: '{{ 'No se puede asignar más vehículos al movimiento porque se ha alcanzado el límite de transporte de vehículos por carretera (10 unidades)' }}',
                errorAssigningVehicleLinesNotification: '{{ 'Disculpe, se ha producido un error durante la asignación de vehículos' }}',
                vehicleLinesAssignedSuccessNotification: '{{ 'Vehículos asignados correctamente' }}',
                movementFinalizedOrCancelled:'{{ 'No se puede gestionar los vehículos del movimiento porque ha finalizado o se ha cancelado' | trans }}',
                movementIsDriver:'{{ 'El movimiento es de tipo conductor, no se puede asignar más vehículos' | trans }}',
            },
        };
        
        let constants = {
            // Category
            category: {
                ordinary: {{ constantsManager.TRANSPORTCAT_ORDINARY }},
                notOrdinary: {{ constantsManager.TRANSPORTCAT_NOT_ORDINARY }},
                internal: {{ constantsManager.TRANSPORTCAT_INTERNAL }},
            },
            // MovementTypr
            movementType: {
                driver: {{ constantsManager.TRANSPORTTYPE_DRIVER }},
                carrier: {{ constantsManager.TRANSPORTTYPE_CARRIER }},
                operation: {{ constantsManager.TRANSPORTTYPE_OPERATION }},
            },
            // MovementStatus
            movementStatus: {
                pending: {{ constantsManager.TRANSPORTSTATUS_PENDING }},
                progress: {{ constantsManager.TRANSPORTSTATUS_IN_PROGRESS }},
                finalized: {{ constantsManager.TRANSPORTSTATUS_FINISHED }},
                cancelled: {{ constantsManager.TRANSPORTSTATUS_CANCELLED }},
            },
            // External locations
            // TODO renombrar esto a externalLocations
            locations: {
                location: {
                    id: '{{ locationConstants.EXTERNAL_LOCATION }}',
                    name: '{{ locationConstants.EXTERNAL_LOCATION | trans }}'
                },
                not_location: {
                    id: '{{ locationConstants.EXTERNAL_LOCATION_NOT_LOCATION }}',
                    name: '{{ locationConstants.EXTERNAL_LOCATION_NOT_LOCATION | trans }}'
                }
            },
            // BusinessUnit
            businessUnit:{
                center: '{{ constantsManager.BUSINESSUNIT_CENTER }}',
                car: '{{ constantsManager.BUSINESSUNIT_CAR }}',
                van: '{{ constantsManager.BUSINESSUNIT_VAN }}',
                moto: '{{ constantsManager.BUSINESSUNIT_MOTO }}',
                vob2c: '{{ constantsManager.BUSINESSUNIT_VO_B2C }}',
                vob2b: '{{ constantsManager.BUSINESSUNIT_VO_B2B }}',
            },
            // BusinessUnitArticle
            businessUnitArticle: {
                transport: {
                    buyback: '{{ constantsManager.BUSINESSUNITARTICLE_TRANSPORT_BUYBACK }}',
                    b2b: '{{ constantsManager.BUSINESSUNITARTICLE_TRANSPORT_B2B }}',
                    distribution: '{{ constantsManager.BUSINESSUNITARTICLE_TRANSPORT_DISTRIBUTION }}',
                    b2c: '{{ constantsManager.BUSINESSUNITARTICLE_TRANSPORT_B2C }}',
                    infleet: '{{ constantsManager.BUSINESSUNITARTICLE_TRANSPORT_INFLEET }}',
                },
            },
            // TransportMethod
            transportMethod: {
                maritime: {{ constantsManager.TRANSPORTMETHOD_MARITIME }},
                road: {{ constantsManager.TRANSPORTMETHOD_ROAD }},
            },
            transportMethodRoadMaxVehicles: 10,
            // SaleMethod
            saleMethod: {
                risk: {{ constantsManager.PURCHASEMETHOD_RISK }},
                buyback: {{ constantsManager.PURCHASEMETHOD_BUYBACK }},
                renting: {{ constantsManager.PURCHASEMETHOD_RENTING }},
            },

            COUNT_MAX_COST: 4,
            MAX_SET_TIME: 1000,
            UNITS_EN: 'units',
            STORE_ITEMS: 'form/items',
            STORE_DELETE: 'form/delete',

        };
        
        function getSaleMethodOfBusinessUnitArticle(businessUnitArticle) {
            const options = {
                [constants.businessUnitArticle.transport.buyback]: constants.saleMethod.buyback,
                [constants.businessUnitArticle.transport.b2b]: constants.saleMethod.risk,
                [constants.businessUnitArticle.transport.distribution]: null,
                [constants.businessUnitArticle.transport.b2c]: constants.saleMethod.risk,
                [constants.businessUnitArticle.transport.infleet]: null,
            };            
            return options[businessUnitArticle];
        }
    </script>


{% endblock javascripts %}